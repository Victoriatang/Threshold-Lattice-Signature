#ifndef INTERVALTEST_H_
#define INTERVALTEST_H_

#include "BitLTC1.h"
#include "config.h"
#include "params.h"
#include <cmath>
void intervalt1(SecShare &a,SecShare blow[comp_bitsNum],SecShare bhigh[comp_bitsNum],ifstream &fin);
// a is need to be compared with c1 and c2, the  input is blow[comp_bitsNum],
	//the output a=b+rï¼Œ where r is generated by bits blow[comp_bitsNum], bhigh[comp_bitsNum]=blow[comp_bitsNum]
//shared bits blow[i] & bhigh[i] are not be changed. a is changed, in the last phase, 
	//the new a will be compared with c1 and c2
// shares a is opened to be int c. 
void intervalt2(SecShare blow[comp_bitsNum],SecShare bhigh[comp_bitsNum],int32_t c,int32_t c1,int32_t c2,SecShare aalow[comp_bitsNum],SecShare bblow[comp_bitsNum],SecShare cclow[comp_bitsNum],
	SecShare aahigh[comp_bitsNum],SecShare bbhigh[comp_bitsNum],SecShare cchigh[comp_bitsNum],SecShare epsilonsharelow[comp_bitsNum],SecShare deltasharelow[comp_bitsNum],
	SecShare epsilonsharehigh[comp_bitsNum],SecShare deltasharehigh[comp_bitsNum],ifstream &fin, ifstream &fin1);
//lowbits[comp_bitsNum] hithbits[comp_bitsNum] are bit representations of int low and high. 
// Secshare blow[comp_bitsNum] & bhigh[comp_bitsNum] are generated shared bits used in bitltc algorithm, and will be changed. 
//open epsilonshare & deltashare are int epsilon and int delta
void intervalt3(SecShare aalow[comp_bitsNum],SecShare bblow[comp_bitsNum],SecShare cclow[comp_bitsNum],SecShare aahigh[comp_bitsNum],SecShare bbhigh[comp_bitsNum],
	SecShare cchigh[comp_bitsNum],int32_t epsilonlow[comp_bitsNum], int32_t	deltalow[comp_bitsNum],int32_t epsilonhigh[comp_bitsNum],int32_t deltahigh[comp_bitsNum]);
	//aalow,bblow,cclow,aahigh,bbhigh,cchigh,epsilonlow,deltalow,epsilonhigh,deltahigh are used for bitltc
//open aalow is int mlow; open aahigh is int mhigh
void intervalt4(
SecShare &slow,SecShare &shigh,SecShare &bitlow,SecShare &bithigh,int32_t c,int32_t c1,int32_t c2,
	SecShare blow[comp_bitsNum],SecShare bhigh[comp_bitsNum],int32_t mlow[comp_bitsNum],int32_t mhigh[comp_bitsNum],ifstream &fin,ifstream &finb);
//lowbits,highbits are bits of low & high, slow & shigh, bitlow & bithigh will be the output of bitltc3 or bitltc3minus,
// while blow[comp_bitsNum] bhigh[comp_bitsNum] mlow[comp_bitsNum] & mhigh[comp_bitsNum] will be the input of bitltc3 or bitltc3minus.
//open slow is int clow, open shigh is int chigh
void intervalt5(int32_t clow,int32_t chigh,SecShare &bitlow,SecShare &bithigh,SecShare &secsharea,SecShare &secshareb,SecShare &secsharec,
	SecShare &epsilonshare,SecShare &deltashare,ifstream &fin);
//clow,chigh bitlow bithigh are used for bitltc4,the output is set in bitlow & bithigh
	// a,b,c,epsilonshare,deltashare,fin are used to compute bitlow * bithigh
// epsilonshare & deltashare are opened to be epsilon and delta
void intervalt6(int32_t c, int32_t c1,int32_t c2,SecShare &secsharea,SecShare &secshareb,SecShare &secsharec,int32_t epsilon,int32_t delta);
// a,b,c,epsilon,delta are input for multiply, the result is set on secsharea.
void intervalt1p(SecShare &a,SecShare bit[comp_bitsNum],ifstream &fin);
void intervalt2p(SecShare bit[comp_bitsNum],int32_t c,
SecShare aa[comp_bitsNum],SecShare bb[comp_bitsNum],SecShare cc[comp_bitsNum],SecShare epsilonshare[comp_bitsNum],
SecShare deltashare[comp_bitsNum],ifstream &fin,ifstream &fin1);
void intervalt3p(SecShare aa[comp_bitsNum],SecShare bb[comp_bitsNum],SecShare cc[comp_bitsNum],int32_t epsilon[comp_bitsNum],
int32_t delta[comp_bitsNum]);
void intervalt4p(int32_t c,SecShare &s,SecShare &onebit,SecShare bit[comp_bitsNum],
int32_t m[comp_bitsNum],ifstream &fin,ifstream &finb);
void intervalt5p(int32_t splusb, SecShare &onebit);
#endif